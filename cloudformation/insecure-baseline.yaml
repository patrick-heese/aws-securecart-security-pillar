AWSTemplateFormatVersion: '2010-09-09'
Description: Intentionally INSECURE baseline for demo (public EC2, public RDS, public S3).

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH (for demo).

  VpcCidr:
    Type: String
    Default: 10.1.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Default: 10.1.1.0/24

  PublicSubnet2Cidr:
    Type: String
    Default: 10.1.3.0/24

  DBMasterUsername:
    Type: String
    Default: admin

  DBMasterUserPassword:
    Type: String
    NoEcho: true
    Description: Demo-only password (INSECURE).

  BucketNameSuffix:
    Type: String
    Default: insecure-demo

  InstanceType:
    Type: String
    Default: t3.micro

  LatestAl2023Ami:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: insecure-vpc

  Igw:
    Type: AWS::EC2::InternetGateway

  VpcIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: insecure-public-a

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: insecure-public-b

  PublicRt:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRtIgwRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  PublicRtAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRt

  PublicRtAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRt

  SgInsecureEc2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: INSECURE - SSH/HTTP from anywhere.
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # --- INSECURE: wildly over-permissive S3 rights on the instance role ---
  InsecureInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  InsecureS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: insecure-ec2-s3-all
      Roles:
        - !Ref InsecureInstanceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EverythingS3
            Effect: Allow
            Action: 's3:*'
            Resource: '*'

  InsecureInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InsecureInstanceRole
      Path: /

  InsecureInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAl2023Ami
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref SgInsecureEc2
      IamInstanceProfile: !Ref InsecureInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eux
          dnf -y install nginx
          echo "<h1>INSECURE SecureCart Demo</h1>" > /usr/share/nginx/html/index.html
          systemctl enable nginx
          systemctl start nginx
      Tags:
        - Key: Name
          Value: insecure-ec2

  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: insecure public db subnets
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  SgInsecureDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: INSECURE - MySQL open to the world.
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  InsecureDb:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: '8.0'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPassword
      VPCSecurityGroups:
        - !Ref SgInsecureDb
      DBSubnetGroupName: !Ref DbSubnetGroup
      PubliclyAccessible: true
      DeletionProtection: false

  InsecureBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'securecart-${BucketNameSuffix}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  InsecureBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InsecureBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPublicReadAccessToObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${InsecureBucket}/*'

Outputs:
  InsecureEc2PublicIp:
    Value: !GetAtt InsecureInstance.PublicIp

  InsecureDbEndpoint:
    Value: !GetAtt InsecureDb.Endpoint.Address

  InsecureBucketName:
    Value: !Ref InsecureBucket
